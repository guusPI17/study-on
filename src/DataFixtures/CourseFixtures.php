<?php


namespace App\DataFixtures;

use App\Entity\Lesson;
use App\Entity\Course;
use Doctrine\Bundle\FixturesBundle\Fixture;
use Doctrine\Persistence\ObjectManager;

class CourseFixtures extends Fixture
{


    public function load(ObjectManager $manager)
    {
        $descriptionsCourses = [
            '\'Школа глубокого обучения (Deep Learning School) – учебная организация на базе Физтех-школы прикладной математики и информатики Московского физико-технического института. Мы занимаемся разработкой курсов по искусственному интеллекту для школьников и студентов, интересующихся программированием и математикой. Занятия ведут преподаватели, выпускники и студенты ФПМИ МФТИ.\'',
            '\'Статистика и исследования – это не скучно, а про кото-вероятности и шансы убежать от зомби!
Этот курс создан не только чтобы учить, но и чтобы развлекать. Существуют сотни статей с такими смешными названиями и необычными исследованиями, что даже не верится в престижность научных журналов, в которых их публикуют. Именно такие яркие запоминающиеся примеры я использую для объяснения базовых понятий о том, как грамотно спланировать исследование и проанализировать его результаты.
Я научу вас думать об исследованиях систематично и критически, осмысливая новые знания с помощью интересных задач и рекомендуя веселые источники для последующего изучения. \'',
            '\'О курсе
Если знаешь основы программирования и изучаешь самостоятельно язык программирования C#
Если готовишься к собеседованиям на роль C# программиста
Если хочешь разобраться в ООП
Если хочешь реализовать свой собственный проект, но не хватает знаний
 
Тогда данный курс для Вас! Мы переработали множество материалов и книг в максимально простую для восприятия и понимания форму. Курс можно проходить в удобном для себя темпе. Курс доступ на ПК и на мобильных устройствах.

Полностью все модули пока недоступны. Каждую неделю открывается НОВЫЙ МОДУЛЬ!\'',
        ];

        $codeCourses = [
            'C202103011957AG',
            'C202103011958AG',
            'C202103012023AG',
        ];

        $nameCourses = [
            'Deep Learning (семестр 1, весна 2021): базовый поток',
            'Принципы дизайна исследований и статистики в медицине',
            'C# для продвинутых',
        ];

        $nameLesson = [
            'Введение',
            'Что такое Deep Learning?',
            'Введение в статистику',
            'Математические анализ',
            'Методы машинного обучения',
            'WPF - основы',
        ];

        $contentLesson = [
            'Глубокое обучение (глубинное обучение; англ. Deep learning) — совокупность методов машинного обучения (с учителем, с частичным привлечением учителя, без учителя, с подкреплением), основанных на обучении представлениям (англ. feature/representation learning), а не специализированным алгоритмам под конкретные задачи. Многие методы глубокого обучения были известны ещё в 1980-е (и даже ранее[1]), но результаты были невпечатляющими[2], пока продвижения в теории искусственных нейронных сетей (предобучение нейросетей с помощью специального случая ненаправленной графической модели, так называемой ограниченной машины Больцмана) и вычислительные мощности середины 2000-х годов (в том числе использующие графические ускорители, программируемые пользователем вентильные матрицы и различные формы нейронных процессоров) не позволили создавать сложные технологические архитектуры нейронных сетей, обладающие достаточной производительностью и позволяющие решать широкий спектр задач, не поддававшихся эффективному решению ранее, например, в компьютерном зрении, машинном переводе, распознавании речи, причём качество решения во многих случаях теперь сопоставимо, а в некоторых случаях превосходит эффективность человека[3].',
            'Несмотря на то что термин «глубокое обучение» появился в научном сообществе машинного обучения только в 1986 году после работы Рины Дехтер[4], первый общий рабочий алгоритм для глубоких многослойных перцептронов прямого распространения был опубликован в книге советских учёных Алексея Григорьевича Ивахненко и Валентина Григорьевича Лапы «Кибернетические предсказывающие устройства»[5].

Другие глубокие архитектуры, в особенности те, которые специализируются на распознавании образов, берут своё начало с неокогнитрона, разработанного Кунихико Фукусимой в 1980 году. В 1989 году Яну Лекуну удалось использовать алгоритм обратного распространения ошибки для обучения глубоких нейросетей для решения задачи распознавания рукописных ZIP-кодов[6]. Несмотря на успешный опыт, для обучения модели потребовалось три дня, что существенно ограничивало применимость этого метода. Низкая скорость обучения связана со многими факторами, включая проблему исчезающих градиентов из-за большого разброса масштабов обучаемых параметров, которую в 1991 году анализировали Йорген Шмидхубер и Сепп Хохрайтер. Из-за этих проблем нейронные сети в 1990-х годах уступили место методу опорных векторов.

К 1991 году такие системы использовались для распознавания изолированных двумерных рукописных цифр, а распознавание трёхмерных объектов осуществлялось путём сопоставления двумерных изображений с трёхмерной объектной моделью, изготовленной вручную. В 1992 году создана модель кресцептрона[7][8][9] для распознавания трёхмерных объектов в загромождённых сценах.

В 1994 году Андре де Карвальо, вместе с Майком Фэйрхерстом и Дэвидом Биссетом, опубликовал экспериментальные результаты многослойной булевой нейронной сети, также известной как невесомая нейронная сеть, состоящая из трехуровневого самоорганизующегося модуля нейронной сети для выделения признаков (SOFT), а затем модуль многоуровневой классификации нейронной сети (GSN). Каждый модуль прошел независимое друг от друга обучение. Каждый слой в модуле извлекал объекты с растущей сложностью относительно предыдущего слоя.[10]',
            'Стати́стика — отрасль знаний, наука, в которой излагаются общие вопросы сбора, измерения, мониторинга, анализа массовых статистических (количественных или качественных) данных и их сравнение; изучение количественной стороны массовых общественных явлений в числовой форме[1].

Специалист (учёный) в области статистики именуется Статистик. Слово «статистика» происходит от латинского status — состояние дел[2]. В науку термин «статистика» ввёл немецкий учёный Готфрид Ахенвалль в 1746 году, предложив заменить название курса «Государствоведение», преподававшегося в университетах Германии, на «Статистику», положив тем самым начало развитию статистики как науки и учебной дисциплины. Несмотря на это, статистический учёт вёлся намного раньше: проводились переписи населения в Древнем Китае, осуществлялось сравнение военного потенциала государств, вёлся учёт имущества граждан в Древнем Риме и тому подобное[3]. Статистика разрабатывает специальную методологию исследования и обработки материалов: массовые статистические наблюдения, метод группировок, средних величин, индексов, балансовый метод, метод графических изображений, кластерный, дискриминантный, факторный и компонентный анализы, оптимизацию и другие методы анализа статистических данных.',
            'Золотое сечение (золотая пропорция, деление в крайнем и среднем отношении, гармоническое деление) — соотношение двух величин {\displaystyle a}a и {\displaystyle b}b, при котором бо́льшая величина относится к меньшей, так же, как сумма величин к бо́льшей, то есть: {\displaystyle {\frac {a}{b}}={\frac {a+b}{a}}.}{\displaystyle {\frac {a}{b}}={\frac {a+b}{a}}.} Исторически изначально в древнегреческой математике золотым сечением именовалось деление отрезка {\displaystyle AB}AB точкой {\displaystyle C}C на две части так, что бо́льшая часть относится к меньшей, как весь отрезок к большей: {\displaystyle {\frac {BC}{AC}}={\frac {AB}{BC}}}{\displaystyle {\frac {BC}{AC}}={\frac {AB}{BC}}}. Позже это понятие было распространено на произвольные величины.

Число, равное отношению {\displaystyle a/b}a/b, обычно обозначается прописной греческой буквой {\displaystyle \Phi }\Phi  (фи), в честь древнегреческого скульптора и архитектора Фидия[2], реже — греческой буквой {\displaystyle \tau }\tau .

Из исходного равенства (например, представляя a или даже a/b независимой переменной и решая выводимое из исходного равенства квадратное уравнение) нетрудно получить, что число',
            'Windows Forms — интерфейс программирования приложений (API), отвечающий за графический интерфейс пользователя и являющийся частью Microsoft .NET Framework. Данный интерфейс упрощает доступ к элементам интерфейса Microsoft Windows за счет создания обёртки для существующего Win32 API в управляемом коде. Причём управляемый код — классы, реализующие API для Windows Forms, не зависят от языка разработки. То есть программист одинаково может использовать Windows Forms как при написании ПО на C#, С++, так и на VB.Net, J# и др.

С одной стороны, Windows Forms рассматривается как замена более старой и сложной библиотеке MFC, изначально написанной на языке C++. С другой стороны, WF не предлагает парадигмы, сравнимой с MVC. Для исправления этой ситуации и реализации данной функциональности в WF существуют сторонние библиотеки. Одной из наиболее используемых подобных библиотек является User Interface Process Application Block, выпущенная специальной группой Microsoft, занимающейся примерами и рекомендациями, для бесплатного скачивания. Эта библиотека также содержит исходный код и обучающие примеры для ускорения обучения.

Внутри .NET Framework Windows Forms реализуется в рамках пространства имён System.Windows.Forms.',
            'Windows Presentation Foundation (WPF) — аналог WinForms, система для построения клиентских приложений Windows с визуально привлекательными возможностями взаимодействия с пользователем, графическая (презентационная) подсистема в составе .NET Framework (начиная с версии 3.0), использующая язык XAML[1].

WPF предустановлена в Windows Vista (.NET Framework 3.0), Windows 7 (.NET Framework 3.5 SP1), Windows 8 (.NET Framework 4.0 и 4.5), Windows 8.1 (.NET Framework 4.5.1) и Windows 10 (.NET Framework 4.7). С помощью WPF можно создавать широкий спектр как автономных, так и запускаемых в браузере приложений[2].',
        ];

        for ($i = 0, $t = 0; $i < 3; $i++) {
            $course = new Course();
            $course->setCode($codeCourses[$i]);
            $course->setName($nameCourses[$i]);
            $course->setDescription($descriptionsCourses[$i]);
            $manager->persist($course);
            for ($j = 0; $j < 2; $j++, $t++) {
                $lesson = $this->createLesson($course, ($j + 1), $nameLesson[$t], $contentLesson[$t]);
                $manager->persist($lesson);
            }
        }

        $manager->flush();

    }


    /**
     * Создание урока
     *
     * @param  Course  $course
     * @param  integer $number
     * @param  string  $name
     * @param  string  $content
     *
     * @return Lesson
     */
    private function createLesson(Course $course, int $number, string $name, string $content): Lesson
    {
        $lesson = new Lesson();
        $lesson->setCourse($course);
        $lesson->setNumber($number);
        $lesson->setName($name);
        $lesson->setContent($content);
        return $lesson;

    }


}
